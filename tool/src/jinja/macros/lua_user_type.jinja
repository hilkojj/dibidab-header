
{% macro registerLuaUserTypeFunctionName(struct) %}registerLuaUserType_{{ struct.name }}{% endmacro %}

{% macro fromTableFunctionName(struct) %}{{ struct.name }}_fromLuaTable{% endmacro %}

{% macro render(struct) %}
{{ struct.id }} {{ fromTableFunctionName(struct) }}(const sol::table &table)
{
    {{ struct.id }} result {};
    {% if struct.any_exposed_to_lua %}for (const auto &[key, value] : table)
    {
        switch (entt::hashed_string { key.as<const char *>() })
        {
            {% for variable in struct.variables %}{% if variable.lua_exposed %}
            case "{{ variable.name }}"_hs:
                result.{{ variable.name }} = value.as<{{ variable.type }}>();
                break;{%endif%}{% endfor %}
            default:
                break;
        }
    }{% endif %}
    return result;
}

void {{ registerLuaUserTypeFunctionName(struct) }}(sol::state &luaState)
{
    auto userType = luaState.new_usertype<{{ struct.id }}>(
        "{{ struct.name }}",
        sol::call_constructor,
        sol::factories(
            [] ()
            {
                return {{ struct.id }} {};
            },
            {{ fromTableFunctionName(struct) }}
        )
    );
    {% for variable in struct.variables %}{% if variable.lua_exposed %}
    userType["{{ variable.name }}"] = &{{ struct.id }}::{{ variable.name }};{%endif%}{% endfor %}
}{% endmacro %}
