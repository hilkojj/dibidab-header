{% if any_struct_exposed_to_json or any_struct_exposed_to_lua %}#include "{{ original_header_rel_path }}"{% endif %}
#include <reflection/StructInfo.h>
{% if enums|length > 0 %}
#include <reflection/EnumInfo.h>
{% endif %}
{%if any_struct_exposed_to_json %}
#include "registry.struct_json.h"
#include <json.hpp>
{% endif %}
{% if any_struct_exposed_to_lua %}
#include <sol/sol.hpp>
#include <lua/lua_converters.h>
#include <entt/core/hashed_string.hpp>
{% endif %}
{% if any_struct_is_component %}
#include <reflection/ComponentInfo.h>
#include <ecs/Observer.h>
#include <entt/entity/registry.hpp>
{% endif %}
{% import "macros/lua_user_type.jinja" as lua_user_type %}
{% import "macros/component_utils.jinja" as component_utils %}
{% import "macros/lua_enum.jinja" as lua_enum %}
namespace dibidab_struct_info_{{ input_name }}
{
{% for struct in structs %}{% if struct.generate_lua_user_type %}{{ lua_user_type.render(struct) }}{% endif %}{% endfor %}
{% for struct in structs %}{% if struct.any_exposed_to_json %}{{ component_utils.getDefaultJsonObject(struct) }}{% endif %}{% endfor %}
{% for struct in structs %}
{% if struct.is_component %}
{{ component_utils.hasComponent(struct) }}
{{ component_utils.addComponent(struct) }}
{{ component_utils.removeComponent(struct) }}

{{ component_utils.createObserver(struct) }}

{% if struct.any_exposed_to_json %}
{{ component_utils.getJsonObject(struct) }}
{{ component_utils.getJsonArray(struct) }}
{{ component_utils.patchFromJson(struct) }}
{{ component_utils.setFromJson(struct) }}{% endif %}

{{ component_utils.setFromLua(struct) }}
{{ component_utils.fillLuaUtilsTable(struct) }}

dibidab::ComponentInfo COMPONENT_INFO_{{ struct.name }}
{
    "{{ struct.name }}",
    "{{ struct.id }}",
    {
        {% for directory in category_path %}"{{ directory }}",{% endfor %}
    },
    {{ component_utils.hasComponent_function_name(struct) }},
    {{ component_utils.addComponent_function_name(struct) }},
    {{ component_utils.removeComponent_function_name(struct) }},

    {{ component_utils.createObserver_function_name(struct) }},

    {% if struct.any_exposed_to_json %}
    {{ component_utils.getJsonObject_function_name(struct) }},
    {{ component_utils.getJsonArray_function_name(struct) }},
    {{ component_utils.setFromJson_function_name(struct) }},
    {{ component_utils.patchFromJson_function_name(struct) }},{% else %}
    nullptr, nullptr, nullptr, nullptr,{% endif %}

    {{ component_utils.setFromLua_function_name(struct) }},
    {{ component_utils.fillLuaUtilsTable_function_name(struct) }},
};
{% endif %}
dibidab::StructInfo STRUCT_INFO_{{ struct.name }}
{
    "{{ struct.id }}",
    {% if struct.is_component %}&COMPONENT_INFO_{{ struct.name }}{% else %}nullptr{% endif %},
    {
        {% for variable in struct.variables %}{ "{{ variable.name }}", "{{ variable.type }}", {% if variable.lua_exposed %}true{% else %}false{% endif %}, {% if variable.json_exposed %}true{% else %}false{% endif %} },
        {% endfor %}
    },
    {% if struct.any_exposed_to_json %}{{ component_utils.getDefaultJsonObject_function_name(struct) }}{% else %}nullptr{% endif %},
    {% if struct.generate_lua_user_type %}&{{ lua_user_type.registerLuaUserTypeFunctionName(struct) }}{% else %}nullptr{% endif %},
};{% endfor %}

{% for enum in enums %}
{{ lua_enum.render(enum) }}

dibidab::EnumInfo ENUM_INFO_{{ enum.name }}
{
    "{{ enum.id }}",
    { {% for value in enum.vals %}{ "{{ value }}", int({{ enum.id }}::{{ value }}) },{% endfor %} },
    {{ lua_enum.registerLuaEnumFunctionName(enum) }}
};{% endfor %}
}

void {{ input_name }}_registerDibidabStructs()
{
    {% for struct in structs %}
    dibidab::registerStructInfo(dibidab_struct_info_{{ input_name }}::STRUCT_INFO_{{ struct.name }});
    {% if struct.is_component %}dibidab::registerComponentInfo(dibidab_struct_info_{{ input_name }}::COMPONENT_INFO_{{ struct.name }});{% endif %}
    {% endfor %}
    {% for enum in enums %}
    dibidab::registerEnumInfo(dibidab_struct_info_{{ input_name }}::ENUM_INFO_{{ enum.name }});{% endfor %}
}