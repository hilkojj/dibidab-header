#include "{{ original_header_rel_path }}"
{% import "macros/lua_user_type.jinja" as lua_user_type %}
{% import "macros/component_utils.jinja" as component_utils %}
namespace dibidab_struct_info_{{ input_name }}
{
{% for struct in structs %}{% if struct.generate_lua_user_type %}{{ lua_user_type.render(struct) }}{% endif %}{% endfor %}
{% for struct in structs %}{{ component_utils.getDefaultJsonObject(struct) }}{% endfor %}

{% for struct in structs %}
dibidab::StructInfo STRUCT_INFO_{{ struct.name }} {
    "{{ struct.id }}",
    {
        {% for variable in struct.variables %}{ "{{ variable.name }}", "{{ variable.type }}", {% if variable.lua_exposed %}true{% else %}false{% endif %}, {% if variable.json_exposed %}true{% else %}false{% endif %} },
        {% endfor %}
    },
    {{ component_utils.getDefaultJsonObject_function_name(struct) }},
    {% if struct.generate_lua_user_type %}&{{ lua_user_type.registerLuaUserTypeFunctionName(struct) }},{% else %}nullptr,{% endif %}
};
{% if struct.is_component %}
{{ component_utils.hasComponent(struct) }}
{{ component_utils.addComponent(struct) }}
{{ component_utils.removeComponent(struct) }}

{{ component_utils.createObserver(struct) }}

{{ component_utils.getJsonObject(struct) }}
{{ component_utils.getJsonArray(struct) }}
{{ component_utils.setFromJson(struct) }}

{{ component_utils.setFromLua(struct) }}
{{ component_utils.fillLuaUtilsTable(struct) }}

dibidab::ComponentInfo COMPONENT_INFO_{{ struct.name }} {
    "{{ struct.name }}",
    "{{ struct.id }}",
    {
        {% for directory in category_path %}"{{ directory }}",{% endfor %}
    },
    {{ component_utils.hasComponent_function_name(struct) }},
    {{ component_utils.addComponent_function_name(struct) }},
    {{ component_utils.removeComponent_function_name(struct) }},

    {{ component_utils.createObserver_function_name(struct) }},

    {{ component_utils.getJsonObject_function_name(struct) }},
    {{ component_utils.getJsonArray_function_name(struct) }},
    {{ component_utils.setFromJson_function_name(struct) }},

    {{ component_utils.setFromLua_function_name(struct) }},
    {{ component_utils.fillLuaUtilsTable_function_name(struct) }},
};
{% endif %}{% endfor %}
void registerDibidabStructs()
{
    {% for struct in structs %}
    dibidab::registerStructInfo(STRUCT_INFO_{{ struct.name }});
    {% if struct.is_component %}dibidab::registerComponentInfo(COMPONENT_INFO_{{ struct.name }});{% endif %}
    {% endfor %}
}
}
